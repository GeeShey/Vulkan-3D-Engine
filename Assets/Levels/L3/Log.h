// "Log.h" generated by "Obj2Header.exe" [Version 1.9d] Author: L.Norri Fullsail University.
// Data is converted to left-handed coordinate system and UV data is V flipped for Direct3D/Vulkan.
// The companion file "Log.h2b" is a binary dump of this format(-padding) for more flexibility.
// Loading *.h2b: read version, sizes, handle strings(max len 260) by reading until null-terminated.
/***********************/
/*  Generator version  */
/***********************/
#ifndef _Log_version_
const char Log_version[4] = { '0','1','9','d' };
#define _Log_version_
#endif
/************************************************/
/*  This section contains the model's size data */
/************************************************/
#ifndef _Log_vertexcount_
const unsigned Log_vertexcount = 76;
#define _Log_vertexcount_
#endif
#ifndef _Log_indexcount_
const unsigned Log_indexcount = 132;
#define _Log_indexcount_
#endif
#ifndef _Log_materialcount_
const unsigned Log_materialcount = 2; // can be used for batched draws
#define _Log_materialcount_
#endif
#ifndef _Log_meshcount_
const unsigned Log_meshcount = 2;
#define _Log_meshcount_
#endif
/************************************************/
/*  This section contains the raw data to load  */
/************************************************/
#ifndef __OBJ_VEC3__
typedef struct _OBJ_VEC3_
{
	float x,y,z; // 3D Coordinate.
}OBJ_VEC3;
#define __OBJ_VEC3__
#endif
#ifndef __OBJ_VERT__
typedef struct _OBJ_VERT_
{
	OBJ_VEC3 pos; // Left-handed +Z forward coordinate w not provided, assumed to be 1.
	OBJ_VEC3 uvw; // D3D/Vulkan style top left 0,0 coordinate.
	OBJ_VEC3 nrm; // Provided direct from obj file, may or may not be normalized.
}OBJ_VERT;
#define __OBJ_VERT__
#endif
#ifndef _Log_vertices_
// Raw Vertex Data follows: Positions, Texture Coordinates and Normals.
const OBJ_VERT Log_vertices[76] =
{
	{	{ -1.218091f, 0.139369f, 0.196124f },	{ 0.150333f, 0.796837f, 0.000000f },	{ 0.000000f, 0.000000f, 1.000000f }	},
	{	{ -1.230574f, 0.160991f, 0.196124f },	{ 0.499930f, 0.703162f, 0.000000f },	{ 0.000000f, 0.000000f, 1.000000f }	},
	{	{ -1.230574f, 0.139369f, 0.196124f },	{ 0.278294f, 0.924798f, 0.000000f },	{ 0.000000f, 0.000000f, 1.000000f }	},
	{	{ -1.224332f, 0.162663f, 0.061002f },	{ 0.721705f, 0.924798f, 0.000000f },	{ 0.000000f, -0.000000f, -1.000000f }	},
	{	{ -1.224332f, 0.137697f, 0.061002f },	{ 0.628031f, 0.575201f, 0.000000f },	{ 0.000000f, -0.000000f, -1.000000f }	},
	{	{ -1.235143f, 0.156422f, 0.061002f },	{ 0.849667f, 0.796837f, 0.000000f },	{ 0.000000f, -0.000000f, -1.000000f }	},
	{	{ -1.236816f, 0.150180f, 0.196124f },	{ 0.453093f, 0.877961f, 0.000000f },	{ 0.000000f, 0.000000f, 1.000000f }	},
	{	{ -1.235143f, 0.143938f, 0.196124f },	{ 0.371969f, 0.924798f, 0.000000f },	{ 0.000000f, 0.000000f, 1.000000f }	},
	{	{ -1.235143f, 0.156422f, 0.196124f },	{ 0.499930f, 0.796837f, 0.000000f },	{ 0.000000f, 0.000000f, 1.000000f }	},
	{	{ -1.218091f, 0.160991f, 0.196124f },	{ 0.371969f, 0.575201f, 0.000000f },	{ 0.000000f, 0.000000f, 1.000000f }	},
	{	{ -1.224333f, 0.162663f, 0.196124f },	{ 0.453093f, 0.622038f, 0.000000f },	{ 0.000000f, 0.000000f, 1.000000f }	},
	{	{ -1.213522f, 0.156422f, 0.196124f },	{ 0.278294f, 0.575201f, 0.000000f },	{ 0.000000f, 0.000000f, 1.000000f }	},
	{	{ -1.211849f, 0.150180f, 0.196124f },	{ 0.197170f, 0.622038f, 0.000000f },	{ 0.000000f, 0.000000f, 1.000000f }	},
	{	{ -1.213522f, 0.143938f, 0.196124f },	{ 0.150333f, 0.703163f, 0.000000f },	{ 0.000000f, 0.000000f, 1.000000f }	},
	{	{ -1.224333f, 0.137697f, 0.196124f },	{ 0.197170f, 0.877961f, 0.000000f },	{ 0.000000f, 0.000000f, 1.000000f }	},
	{	{ -1.235143f, 0.143938f, 0.061002f },	{ 0.802830f, 0.622038f, 0.000000f },	{ 0.000000f, -0.000000f, -1.000000f }	},
	{	{ -1.236816f, 0.150180f, 0.061002f },	{ 0.849667f, 0.703163f, 0.000000f },	{ 0.000000f, -0.000000f, -1.000000f }	},
	{	{ -1.230574f, 0.139369f, 0.061002f },	{ 0.721705f, 0.575201f, 0.000000f },	{ 0.000000f, -0.000000f, -1.000000f }	},
	{	{ -1.213522f, 0.156422f, 0.061002f },	{ 0.546907f, 0.877961f, 0.000000f },	{ 0.000000f, -0.000000f, -1.000000f }	},
	{	{ -1.218091f, 0.139369f, 0.061002f },	{ 0.546907f, 0.622038f, 0.000000f },	{ 0.000000f, -0.000000f, -1.000000f }	},
	{	{ -1.213522f, 0.143938f, 0.061002f },	{ 0.500070f, 0.703163f, 0.000000f },	{ 0.000000f, -0.000000f, -1.000000f }	},
	{	{ -1.211849f, 0.150180f, 0.061002f },	{ 0.500070f, 0.796837f, 0.000000f },	{ 0.000000f, -0.000000f, -1.000000f }	},
	{	{ -1.218091f, 0.160991f, 0.061002f },	{ 0.628031f, 0.924798f, 0.000000f },	{ 0.000000f, -0.000000f, -1.000000f }	},
	{	{ -1.230574f, 0.160991f, 0.061002f },	{ 0.802830f, 0.877961f, 0.000000f },	{ 0.000000f, -0.000000f, -1.000000f }	},
	{	{ -1.236816f, 0.150180f, 0.196124f },	{ 0.102887f, 1.351184f, 0.000000f },	{ -0.965900f, -0.258800f, 0.000000f }	},
	{	{ -1.236816f, 0.150180f, 0.061002f },	{ 0.102880f, -0.030494f, 0.000000f },	{ -0.965900f, -0.258800f, 0.000000f }	},
	{	{ -1.235143f, 0.143938f, 0.061002f },	{ 0.165716f, -0.030494f, 0.000000f },	{ -0.965900f, -0.258800f, 0.000000f }	},
	{	{ -1.235143f, 0.143938f, 0.196124f },	{ 0.165722f, 1.351183f, 0.000000f },	{ -0.707100f, -0.707100f, -0.000000f }	},
	{	{ -1.235143f, 0.143938f, 0.061002f },	{ 0.165716f, -0.030494f, 0.000000f },	{ -0.707100f, -0.707100f, -0.000000f }	},
	{	{ -1.230574f, 0.139369f, 0.061002f },	{ 0.228552f, -0.030494f, 0.000000f },	{ -0.707100f, -0.707100f, -0.000000f }	},
	{	{ -1.230574f, 0.139369f, 0.196124f },	{ 0.228557f, 1.351183f, 0.000000f },	{ -0.258800f, -0.965900f, -0.000000f }	},
	{	{ -1.230574f, 0.139369f, 0.061002f },	{ 0.228552f, -0.030494f, 0.000000f },	{ -0.258800f, -0.965900f, -0.000000f }	},
	{	{ -1.224332f, 0.137697f, 0.061002f },	{ 0.291388f, -0.030494f, 0.000000f },	{ -0.258800f, -0.965900f, -0.000000f }	},
	{	{ -1.224333f, 0.137697f, 0.196124f },	{ 0.291393f, 1.351182f, 0.000000f },	{ 0.258800f, -0.965900f, 0.000000f }	},
	{	{ -1.224332f, 0.137697f, 0.061002f },	{ 0.291388f, -0.030494f, 0.000000f },	{ 0.258800f, -0.965900f, 0.000000f }	},
	{	{ -1.218091f, 0.139369f, 0.061002f },	{ 0.354224f, -0.030495f, 0.000000f },	{ 0.258800f, -0.965900f, 0.000000f }	},
	{	{ -1.218091f, 0.139369f, 0.196124f },	{ 0.354228f, 1.351182f, 0.000000f },	{ 0.707100f, -0.707100f, 0.000000f }	},
	{	{ -1.218091f, 0.139369f, 0.061002f },	{ 0.354224f, -0.030495f, 0.000000f },	{ 0.707100f, -0.707100f, 0.000000f }	},
	{	{ -1.213522f, 0.143938f, 0.061002f },	{ 0.417060f, -0.030495f, 0.000000f },	{ 0.707100f, -0.707100f, 0.000000f }	},
	{	{ -1.213522f, 0.143938f, 0.061002f },	{ 0.417060f, -0.030495f, 0.000000f },	{ 0.965900f, -0.258800f, 0.000000f }	},
	{	{ -1.211849f, 0.150180f, 0.061002f },	{ 0.479896f, -0.030495f, 0.000000f },	{ 0.965900f, -0.258800f, 0.000000f }	},
	{	{ -1.211849f, 0.150180f, 0.196124f },	{ 0.479898f, 1.351181f, 0.000000f },	{ 0.965900f, -0.258800f, 0.000000f }	},
	{	{ -1.211849f, 0.150180f, 0.061002f },	{ 0.479896f, -0.030495f, 0.000000f },	{ 0.965900f, 0.258900f, 0.000000f }	},
	{	{ -1.213522f, 0.156422f, 0.061002f },	{ 0.542732f, -0.030495f, 0.000000f },	{ 0.965900f, 0.258900f, 0.000000f }	},
	{	{ -1.213522f, 0.156422f, 0.196124f },	{ 0.542733f, 1.351181f, 0.000000f },	{ 0.965900f, 0.258900f, 0.000000f }	},
	{	{ -1.213522f, 0.156422f, 0.196124f },	{ 0.542733f, 1.351181f, 0.000000f },	{ 0.707100f, 0.707100f, 0.000000f }	},
	{	{ -1.213522f, 0.156422f, 0.061002f },	{ 0.542732f, -0.030495f, 0.000000f },	{ 0.707100f, 0.707100f, 0.000000f }	},
	{	{ -1.218091f, 0.160991f, 0.061002f },	{ 0.605567f, -0.030495f, 0.000000f },	{ 0.707100f, 0.707100f, 0.000000f }	},
	{	{ -1.218091f, 0.160991f, 0.196124f },	{ 0.605569f, 1.351181f, 0.000000f },	{ 0.258800f, 0.965900f, -0.000000f }	},
	{	{ -1.218091f, 0.160991f, 0.061002f },	{ 0.605567f, -0.030495f, 0.000000f },	{ 0.258800f, 0.965900f, -0.000000f }	},
	{	{ -1.224332f, 0.162663f, 0.061002f },	{ 0.668403f, -0.030495f, 0.000000f },	{ 0.258800f, 0.965900f, -0.000000f }	},
	{	{ -1.224333f, 0.162663f, 0.196124f },	{ 0.668404f, 1.351181f, 0.000000f },	{ -0.258800f, 0.965900f, -0.000000f }	},
	{	{ -1.224332f, 0.162663f, 0.061002f },	{ 0.668403f, -0.030495f, 0.000000f },	{ -0.258800f, 0.965900f, -0.000000f }	},
	{	{ -1.230574f, 0.160991f, 0.061002f },	{ 0.731239f, -0.030495f, 0.000000f },	{ -0.258800f, 0.965900f, -0.000000f }	},
	{	{ -1.235143f, 0.156422f, 0.196124f },	{ 0.794074f, 1.351180f, 0.000000f },	{ -0.965900f, 0.258800f, -0.000000f }	},
	{	{ -1.235143f, 0.156422f, 0.061002f },	{ 0.794075f, -0.030495f, 0.000000f },	{ -0.965900f, 0.258800f, -0.000000f }	},
	{	{ -1.236816f, 0.150180f, 0.061002f },	{ 0.856911f, -0.030495f, 0.000000f },	{ -0.965900f, 0.258800f, -0.000000f }	},
	{	{ -1.230574f, 0.160991f, 0.196124f },	{ 0.731239f, 1.351181f, 0.000000f },	{ -0.707100f, 0.707100f, -0.000000f }	},
	{	{ -1.230574f, 0.160991f, 0.061002f },	{ 0.731239f, -0.030495f, 0.000000f },	{ -0.707100f, 0.707100f, -0.000000f }	},
	{	{ -1.235143f, 0.156422f, 0.061002f },	{ 0.794075f, -0.030495f, 0.000000f },	{ -0.707100f, 0.707100f, -0.000000f }	},
	{	{ -1.235143f, 0.143938f, 0.196124f },	{ 0.165722f, 1.351183f, 0.000000f },	{ -0.965900f, -0.258800f, 0.000000f }	},
	{	{ -1.230574f, 0.139369f, 0.196124f },	{ 0.228557f, 1.351183f, 0.000000f },	{ -0.707100f, -0.707100f, -0.000000f }	},
	{	{ -1.224333f, 0.137697f, 0.196124f },	{ 0.291393f, 1.351182f, 0.000000f },	{ -0.258800f, -0.965900f, -0.000000f }	},
	{	{ -1.218091f, 0.139369f, 0.196124f },	{ 0.354228f, 1.351182f, 0.000000f },	{ 0.258800f, -0.965900f, 0.000000f }	},
	{	{ -1.213522f, 0.143938f, 0.196124f },	{ 0.417063f, 1.351182f, 0.000000f },	{ 0.707100f, -0.707100f, 0.000000f }	},
	{	{ -1.213522f, 0.143938f, 0.061002f },	{ 0.417060f, -0.030495f, 0.000000f },	{ 0.965900f, -0.258900f, 0.000000f }	},
	{	{ -1.211849f, 0.150180f, 0.196124f },	{ 0.479898f, 1.351181f, 0.000000f },	{ 0.965900f, -0.258900f, 0.000000f }	},
	{	{ -1.213522f, 0.143938f, 0.196124f },	{ 0.417063f, 1.351182f, 0.000000f },	{ 0.965900f, -0.258900f, 0.000000f }	},
	{	{ -1.211849f, 0.150180f, 0.061002f },	{ 0.479896f, -0.030495f, 0.000000f },	{ 0.965900f, 0.258800f, 0.000000f }	},
	{	{ -1.213522f, 0.156422f, 0.196124f },	{ 0.542733f, 1.351181f, 0.000000f },	{ 0.965900f, 0.258800f, 0.000000f }	},
	{	{ -1.211849f, 0.150180f, 0.196124f },	{ 0.479898f, 1.351181f, 0.000000f },	{ 0.965900f, 0.258800f, 0.000000f }	},
	{	{ -1.218091f, 0.160991f, 0.196124f },	{ 0.605569f, 1.351181f, 0.000000f },	{ 0.707100f, 0.707100f, 0.000000f }	},
	{	{ -1.224333f, 0.162663f, 0.196124f },	{ 0.668404f, 1.351181f, 0.000000f },	{ 0.258800f, 0.965900f, -0.000000f }	},
	{	{ -1.230574f, 0.160991f, 0.196124f },	{ 0.731239f, 1.351181f, 0.000000f },	{ -0.258800f, 0.965900f, -0.000000f }	},
	{	{ -1.236816f, 0.150180f, 0.196124f },	{ 0.856910f, 1.351181f, 0.000000f },	{ -0.965900f, 0.258800f, -0.000000f }	},
	{	{ -1.235143f, 0.156422f, 0.196124f },	{ 0.794074f, 1.351180f, 0.000000f },	{ -0.707100f, 0.707100f, -0.000000f }	},
};
#define _Log_vertices_
#endif
#ifndef _Log_indices_
// Index Data follows: Sequential by mesh, Every Three Indices == One Triangle.
const unsigned int Log_indices[132] =
{
	 0, 1, 2,
	 3, 4, 5,
	 2, 6, 7,
	 6, 2, 8,
	 8, 2, 1,
	 1, 9, 10,
	 9, 1, 11,
	 11, 1, 12,
	 12, 0, 13,
	 0, 2, 14,
	 12, 1, 0,
	 5, 15, 16,
	 15, 5, 17,
	 17, 5, 4,
	 4, 18, 19,
	 19, 18, 20,
	 20, 18, 21,
	 18, 3, 22,
	 3, 5, 23,
	 18, 4, 3,
	 24, 25, 26,
	 27, 28, 29,
	 30, 31, 32,
	 33, 34, 35,
	 36, 37, 38,
	 39, 40, 41,
	 42, 43, 44,
	 45, 46, 47,
	 48, 49, 50,
	 51, 52, 53,
	 54, 55, 56,
	 57, 58, 59,
	 24, 26, 60,
	 27, 29, 61,
	 30, 32, 62,
	 33, 35, 63,
	 36, 38, 64,
	 65, 66, 67,
	 68, 69, 70,
	 45, 47, 71,
	 48, 50, 72,
	 51, 53, 73,
	 54, 56, 74,
	 57, 59, 75,
};
#define _Log_indices_
#endif
// Part of an OBJ_MATERIAL, the struct is 16 byte aligned so it is GPU register friendly.
#ifndef __OBJ_ATTRIBUTES__
typedef struct _OBJ_ATTRIBUTES_
{
	OBJ_VEC3    Kd; // diffuse reflectivity
	float	    d; // dissolve (transparency) 
	OBJ_VEC3    Ks; // specular reflectivity
	float       Ns; // specular exponent
	OBJ_VEC3    Ka; // ambient reflectivity
	float       sharpness; // local reflection map sharpness
	OBJ_VEC3    Tf; // transmission filter
	float       Ni; // optical density (index of refraction)
	OBJ_VEC3    Ke; // emissive reflectivity
	unsigned    illum; // illumination model
}OBJ_ATTRIBUTES;
#define __OBJ_ATTRIBUTES__
#endif
// This structure also has been made GPU register friendly so it can be transfered directly if desired.
// Note: Total struct size will vary depenedening on CPU processor architecture (string pointers).
#ifndef __OBJ_MATERIAL__
typedef struct _OBJ_MATERIAL_
{
	// The following items are typically used in a pixel/fragment shader, they are packed for GPU registers.
	OBJ_ATTRIBUTES attrib; // Surface shading characteristics & illumination model
	// All items below this line are not needed on the GPU and are generally only used during load time.
	const char* name; // the name of this material
	// If the model's materials contain any specific texture data it will be located below.
	const char* map_Kd; // diffuse texture
	const char* map_Ks; // specular texture
	const char* map_Ka; // ambient texture
	const char* map_Ke; // emissive texture
	const char* map_Ns; // specular exponent texture
	const char* map_d; // transparency texture
	const char* disp; // roughness map (displacement)
	const char* decal; // decal texture (lerps texture & material colors)
	const char* bump; // normal/bumpmap texture
	void* padding[2]; // 16 byte alignment on 32bit or 64bit
}OBJ_MATERIAL;
#define __OBJ_MATERIAL__
#endif
#ifndef _Log_materials_
// Material Data follows: pulled from a .mtl file of the same name if present.
const OBJ_MATERIAL Log_materials[2] =
{
	{
		{{ 0.800000f, 0.800000f, 0.800000f },
		1.000000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		225.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		60.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		1.000000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		1},
		"TreeLogEdgeWeathered",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
	},
	{
		{{ 0.087140f, 0.044223f, 0.017671f },
		1.000000f,
		{ 0.500000f, 0.500000f, 0.500000f },
		225.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		60.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		1.450000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		2},
		"Wood.005",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
	},
};
#define _Log_materials_
#endif
/************************************************/
/*  This section contains the model's structure */
/************************************************/
#ifndef _Log_batches_
// Use this conveinence array to batch render all geometry by like material.
// Each entry corresponds to the same entry in the materials array above.
// The two numbers provided are the IndexCount and the IndexOffset into the indices array.
// If you need more fine grained control(ex: for transformations) use the OBJ_MESH data below.
const unsigned int Log_batches[2][2] =
{
	{ 60, 0 },
	{ 72, 60 },
};
#define _Log_batches_
#endif
#ifndef __OBJ_MESH__
typedef struct _OBJ_MESH_
{
	const char* name;
	unsigned    indexCount;
	unsigned    indexOffset;
	unsigned    materialIndex;
}OBJ_MESH;
#define __OBJ_MESH__
#endif
#ifndef _Log_meshes_
// Mesh Data follows: Meshes are .obj groups sorted & split by material.
// Meshes are provided in sequential order, sorted by material first and name second.
const OBJ_MESH Log_meshes[2] =
{
	{
		"default",
		60,
		0,
		0,
	},
	{
		"default",
		72,
		60,
		1,
	},
};
#define _Log_meshes_
#endif
