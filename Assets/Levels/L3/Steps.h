// "Steps.h" generated by "Obj2Header.exe" [Version 1.9d] Author: L.Norri Fullsail University.
// Data is converted to left-handed coordinate system and UV data is V flipped for Direct3D/Vulkan.
// The companion file "Steps.h2b" is a binary dump of this format(-padding) for more flexibility.
// Loading *.h2b: read version, sizes, handle strings(max len 260) by reading until null-terminated.
/***********************/
/*  Generator version  */
/***********************/
#ifndef _Steps_version_
const char Steps_version[4] = { '0','1','9','d' };
#define _Steps_version_
#endif
/************************************************/
/*  This section contains the model's size data */
/************************************************/
#ifndef _Steps_vertexcount_
const unsigned Steps_vertexcount = 82;
#define _Steps_vertexcount_
#endif
#ifndef _Steps_indexcount_
const unsigned Steps_indexcount = 84;
#define _Steps_indexcount_
#endif
#ifndef _Steps_materialcount_
const unsigned Steps_materialcount = 1; // can be used for batched draws
#define _Steps_materialcount_
#endif
#ifndef _Steps_meshcount_
const unsigned Steps_meshcount = 1;
#define _Steps_meshcount_
#endif
/************************************************/
/*  This section contains the raw data to load  */
/************************************************/
#ifndef __OBJ_VEC3__
typedef struct _OBJ_VEC3_
{
	float x,y,z; // 3D Coordinate.
}OBJ_VEC3;
#define __OBJ_VEC3__
#endif
#ifndef __OBJ_VERT__
typedef struct _OBJ_VERT_
{
	OBJ_VEC3 pos; // Left-handed +Z forward coordinate w not provided, assumed to be 1.
	OBJ_VEC3 uvw; // D3D/Vulkan style top left 0,0 coordinate.
	OBJ_VEC3 nrm; // Provided direct from obj file, may or may not be normalized.
}OBJ_VERT;
#define __OBJ_VERT__
#endif
#ifndef _Steps_vertices_
// Raw Vertex Data follows: Positions, Texture Coordinates and Normals.
const OBJ_VERT Steps_vertices[82] =
{
	{	{ 0.726836f, -0.026127f, 0.033431f },	{ 0.614015f, 1.010911f, 0.000000f },	{ 0.997700f, 0.067400f, 0.000000f }	},
	{	{ 0.727744f, -0.039568f, 0.034607f },	{ 0.614015f, 1.155299f, 0.000000f },	{ 0.997700f, 0.067400f, 0.000000f }	},
	{	{ 0.727744f, -0.039568f, -0.057124f },	{ -0.355169f, 1.155300f, 0.000000f },	{ 0.997700f, 0.067400f, 0.000000f }	},
	{	{ 0.711219f, -0.026079f, -0.056174f },	{ -0.355169f, 0.840544f, 0.000000f },	{ 0.014600f, 0.999900f, -0.002000f }	},
	{	{ 0.711620f, -0.025902f, 0.034607f },	{ 0.614016f, 0.840544f, 0.000000f },	{ 0.014600f, 0.999900f, -0.002000f }	},
	{	{ 0.726836f, -0.026127f, 0.033431f },	{ 0.614015f, 1.010911f, 0.000000f },	{ 0.014600f, 0.999900f, -0.002000f }	},
	{	{ 0.643120f, -0.013992f, 0.032504f },	{ 0.614017f, -0.044457f, 0.000000f },	{ -0.000000f, 1.000000f, 0.004900f }	},
	{	{ 0.710735f, -0.013992f, 0.032504f },	{ 0.614016f, 0.704251f, 0.000000f },	{ -0.000000f, 1.000000f, 0.004900f }	},
	{	{ 0.711125f, -0.013558f, -0.055948f },	{ -0.355170f, 0.704251f, 0.000000f },	{ -0.000000f, 1.000000f, 0.004900f }	},
	{	{ 0.742547f, -0.039443f, -0.055948f },	{ -0.355168f, 1.325666f, 0.000000f },	{ 0.999900f, -0.015900f, -0.002800f }	},
	{	{ 0.742800f, -0.039462f, 0.033656f },	{ 0.614015f, 1.325665f, 0.000000f },	{ 0.999900f, -0.015900f, -0.002800f }	},
	{	{ 0.742547f, -0.055372f, 0.033431f },	{ 0.614016f, 1.498391f, 0.000000f },	{ 0.999900f, -0.015900f, -0.002800f }	},
	{	{ 0.727744f, -0.039568f, 0.034607f },	{ 0.614015f, 1.155299f, 0.000000f },	{ -0.007000f, 1.000000f, 0.000200f }	},
	{	{ 0.742800f, -0.039462f, 0.033656f },	{ 0.614015f, 1.325665f, 0.000000f },	{ -0.007000f, 1.000000f, 0.000200f }	},
	{	{ 0.742547f, -0.039443f, -0.055948f },	{ -0.355168f, 1.325666f, 0.000000f },	{ -0.007000f, 1.000000f, 0.000200f }	},
	{	{ 0.710735f, -0.013992f, 0.032504f },	{ 0.614016f, 0.704251f, 0.000000f },	{ 0.997300f, 0.073300f, -0.004500f }	},
	{	{ 0.711620f, -0.025902f, 0.034607f },	{ 0.614016f, 0.840544f, 0.000000f },	{ 0.997300f, 0.073300f, -0.004500f }	},
	{	{ 0.711219f, -0.026079f, -0.056174f },	{ -0.355169f, 0.840544f, 0.000000f },	{ 0.997300f, 0.073300f, -0.004500f }	},
	{	{ 0.711620f, -0.025902f, 0.034607f },	{ -0.014437f, -0.362099f, 0.000000f },	{ -0.000000f, 0.173800f, 0.984800f }	},
	{	{ 0.710735f, -0.013992f, 0.032504f },	{ -0.014437f, -0.498392f, 0.000000f },	{ -0.000000f, 0.173800f, 0.984800f }	},
	{	{ 0.643120f, -0.013992f, 0.032504f },	{ 0.734270f, -0.498392f, 0.000000f },	{ -0.000000f, 0.173800f, 0.984800f }	},
	{	{ 0.643120f, -0.039340f, 0.032504f },	{ 0.734269f, -0.217710f, 0.000000f },	{ 0.000000f, -0.154600f, 0.988000f }	},
	{	{ 0.711620f, -0.025902f, 0.034607f },	{ -0.014437f, -0.362099f, 0.000000f },	{ 0.000000f, -0.154600f, 0.988000f }	},
	{	{ 0.640756f, -0.025902f, 0.034607f },	{ 0.734270f, -0.362099f, 0.000000f },	{ 0.000000f, -0.154600f, 0.988000f }	},
	{	{ 0.640756f, -0.055916f, 0.034607f },	{ 0.734270f, -0.044983f, 0.000000f },	{ -0.024300f, 0.129200f, 0.991300f }	},
	{	{ 0.727744f, -0.039568f, 0.034607f },	{ -0.184803f, -0.217710f, 0.000000f },	{ -0.024300f, 0.129200f, 0.991300f }	},
	{	{ 0.643120f, -0.039340f, 0.032504f },	{ 0.734269f, -0.217710f, 0.000000f },	{ -0.024300f, 0.129200f, 0.991300f }	},
	{	{ 0.643120f, -0.026300f, -0.055022f },	{ 0.750836f, 1.498392f, 0.000000f },	{ 0.003100f, -0.088900f, -0.996000f }	},
	{	{ 0.641825f, -0.013447f, -0.056174f },	{ 0.614543f, 1.498392f, 0.000000f },	{ 0.003100f, -0.088900f, -0.996000f }	},
	{	{ 0.711125f, -0.013558f, -0.055948f },	{ 0.614543f, 0.749684f, 0.000000f },	{ 0.003100f, -0.088900f, -0.996000f }	},
	{	{ 0.711219f, -0.026079f, -0.056174f },	{ 0.750835f, 0.749684f, 0.000000f },	{ -0.013600f, 0.053700f, -0.998500f }	},
	{	{ 0.727744f, -0.039568f, -0.057124f },	{ 0.895224f, 0.579319f, 0.000000f },	{ -0.013600f, 0.053700f, -0.998500f }	},
	{	{ 0.642078f, -0.039443f, -0.055948f },	{ 0.895225f, 1.498392f, 0.000000f },	{ -0.013600f, 0.053700f, -0.998500f }	},
	{	{ 0.727744f, -0.039568f, -0.057124f },	{ 0.895224f, 0.579319f, 0.000000f },	{ 0.000000f, -0.000000f, -1.000000f }	},
	{	{ 0.743869f, -0.055916f, -0.057124f },	{ 1.067950f, 0.408953f, 0.000000f },	{ 0.000000f, -0.000000f, -1.000000f }	},
	{	{ 0.640756f, -0.055916f, -0.057124f },	{ 1.067952f, 1.498392f, 0.000000f },	{ 0.000000f, -0.000000f, -1.000000f }	},
	{	{ 0.726836f, -0.026127f, 0.033431f },	{ 0.614015f, 1.010911f, 0.000000f },	{ 0.999900f, 0.000000f, 0.010000f }	},
	{	{ 0.727744f, -0.039568f, -0.057124f },	{ -0.355169f, 1.155300f, 0.000000f },	{ 0.999900f, 0.000000f, 0.010000f }	},
	{	{ 0.727744f, -0.025902f, -0.057124f },	{ -0.355169f, 1.010910f, 0.000000f },	{ 0.999900f, 0.000000f, 0.010000f }	},
	{	{ 0.711219f, -0.026079f, -0.056174f },	{ -0.355169f, 0.840544f, 0.000000f },	{ -0.010600f, 0.999900f, 0.002400f }	},
	{	{ 0.726836f, -0.026127f, 0.033431f },	{ 0.614015f, 1.010911f, 0.000000f },	{ -0.010600f, 0.999900f, 0.002400f }	},
	{	{ 0.727744f, -0.025902f, -0.057124f },	{ -0.355169f, 1.010910f, 0.000000f },	{ -0.010600f, 0.999900f, 0.002400f }	},
	{	{ 0.643120f, -0.013992f, 0.032504f },	{ 0.614017f, -0.044457f, 0.000000f },	{ 0.001600f, 1.000000f, 0.006100f }	},
	{	{ 0.711125f, -0.013558f, -0.055948f },	{ -0.355170f, 0.704251f, 0.000000f },	{ 0.001600f, 1.000000f, 0.006100f }	},
	{	{ 0.641825f, -0.013447f, -0.056174f },	{ -0.355169f, -0.044457f, 0.000000f },	{ 0.001600f, 1.000000f, 0.006100f }	},
	{	{ 0.742547f, -0.039443f, -0.055948f },	{ -0.355168f, 1.325666f, 0.000000f },	{ 0.996800f, 0.079000f, 0.014100f }	},
	{	{ 0.742547f, -0.055372f, 0.033431f },	{ 0.614016f, 1.498391f, 0.000000f },	{ 0.996800f, 0.079000f, 0.014100f }	},
	{	{ 0.743869f, -0.055916f, -0.057124f },	{ -0.355167f, 1.498392f, 0.000000f },	{ 0.996800f, 0.079000f, 0.014100f }	},
	{	{ 0.727744f, -0.039568f, 0.034607f },	{ 0.614015f, 1.155299f, 0.000000f },	{ -0.008500f, 1.000000f, -0.000000f }	},
	{	{ 0.742547f, -0.039443f, -0.055948f },	{ -0.355168f, 1.325666f, 0.000000f },	{ -0.008500f, 1.000000f, -0.000000f }	},
	{	{ 0.727744f, -0.039568f, -0.057124f },	{ -0.355169f, 1.155300f, 0.000000f },	{ -0.008500f, 1.000000f, -0.000000f }	},
	{	{ 0.710735f, -0.013992f, 0.032504f },	{ 0.614016f, 0.704251f, 0.000000f },	{ 1.000000f, 0.007500f, 0.004400f }	},
	{	{ 0.711219f, -0.026079f, -0.056174f },	{ -0.355169f, 0.840544f, 0.000000f },	{ 1.000000f, 0.007500f, 0.004400f }	},
	{	{ 0.711125f, -0.013558f, -0.055948f },	{ -0.355170f, 0.704251f, 0.000000f },	{ 1.000000f, 0.007500f, 0.004400f }	},
	{	{ 0.640756f, -0.025902f, 0.034607f },	{ 0.734270f, -0.362099f, 0.000000f },	{ -0.000000f, 0.173800f, 0.984800f }	},
	{	{ 0.726836f, -0.026127f, 0.033431f },	{ -0.184803f, -0.362100f, 0.000000f },	{ 0.078100f, 0.092100f, 0.992700f }	},
	{	{ 0.711620f, -0.025902f, 0.034607f },	{ -0.014437f, -0.362099f, 0.000000f },	{ 0.078100f, 0.092100f, 0.992700f }	},
	{	{ 0.727744f, -0.039568f, 0.034607f },	{ -0.184803f, -0.217710f, 0.000000f },	{ 0.078100f, 0.092100f, 0.992700f }	},
	{	{ 0.727744f, -0.039568f, 0.034607f },	{ -0.184803f, -0.217710f, 0.000000f },	{ -0.024900f, -0.029400f, 0.999300f }	},
	{	{ 0.711620f, -0.025902f, 0.034607f },	{ -0.014437f, -0.362099f, 0.000000f },	{ -0.024900f, -0.029400f, 0.999300f }	},
	{	{ 0.643120f, -0.039340f, 0.032504f },	{ 0.734269f, -0.217710f, 0.000000f },	{ -0.024900f, -0.029400f, 0.999300f }	},
	{	{ 0.742800f, -0.039462f, 0.033656f },	{ -0.355170f, -0.217710f, 0.000000f },	{ 0.063100f, -0.015100f, 0.997900f }	},
	{	{ 0.727744f, -0.039568f, 0.034607f },	{ -0.184803f, -0.217710f, 0.000000f },	{ 0.063100f, -0.015100f, 0.997900f }	},
	{	{ 0.742547f, -0.055372f, 0.033431f },	{ -0.355170f, -0.044984f, 0.000000f },	{ 0.063100f, -0.015100f, 0.997900f }	},
	{	{ 0.742547f, -0.055372f, 0.033431f },	{ -0.355170f, -0.044984f, 0.000000f },	{ 0.011900f, -0.063200f, 0.997900f }	},
	{	{ 0.727744f, -0.039568f, 0.034607f },	{ -0.184803f, -0.217710f, 0.000000f },	{ 0.011900f, -0.063200f, 0.997900f }	},
	{	{ 0.640756f, -0.055916f, 0.034607f },	{ 0.734270f, -0.044983f, 0.000000f },	{ 0.011900f, -0.063200f, 0.997900f }	},
	{	{ 0.643120f, -0.026300f, -0.055022f },	{ 0.750836f, 1.498392f, 0.000000f },	{ -0.017000f, 0.017900f, -0.999700f }	},
	{	{ 0.711125f, -0.013558f, -0.055948f },	{ 0.614543f, 0.749684f, 0.000000f },	{ -0.017000f, 0.017900f, -0.999700f }	},
	{	{ 0.711219f, -0.026079f, -0.056174f },	{ 0.750835f, 0.749684f, 0.000000f },	{ -0.017000f, 0.017900f, -0.999700f }	},
	{	{ 0.727744f, -0.039568f, -0.057124f },	{ 0.895224f, 0.579319f, 0.000000f },	{ -0.057400f, 0.000000f, -0.998300f }	},
	{	{ 0.711219f, -0.026079f, -0.056174f },	{ 0.750835f, 0.749684f, 0.000000f },	{ -0.057400f, 0.000000f, -0.998300f }	},
	{	{ 0.727744f, -0.025902f, -0.057124f },	{ 0.750835f, 0.579319f, 0.000000f },	{ -0.057400f, 0.000000f, -0.998300f }	},
	{	{ 0.711219f, -0.026079f, -0.056174f },	{ 0.750835f, 0.749684f, 0.000000f },	{ -0.017100f, 0.071600f, -0.997300f }	},
	{	{ 0.642078f, -0.039443f, -0.055948f },	{ 0.895225f, 1.498392f, 0.000000f },	{ -0.017100f, 0.071600f, -0.997300f }	},
	{	{ 0.643120f, -0.026300f, -0.055022f },	{ 0.750836f, 1.498392f, 0.000000f },	{ -0.017100f, 0.071600f, -0.997300f }	},
	{	{ 0.743869f, -0.055916f, -0.057124f },	{ 1.067950f, 0.408953f, 0.000000f },	{ 0.078300f, 0.077200f, -0.993900f }	},
	{	{ 0.727744f, -0.039568f, -0.057124f },	{ 0.895224f, 0.579319f, 0.000000f },	{ 0.078300f, 0.077200f, -0.993900f }	},
	{	{ 0.742547f, -0.039443f, -0.055948f },	{ 0.895224f, 0.408953f, 0.000000f },	{ 0.078300f, 0.077200f, -0.993900f }	},
	{	{ 0.727744f, -0.039568f, -0.057124f },	{ 0.895224f, 0.579319f, 0.000000f },	{ -0.013600f, 0.072300f, -0.997300f }	},
	{	{ 0.640756f, -0.055916f, -0.057124f },	{ 1.067952f, 1.498392f, 0.000000f },	{ -0.013600f, 0.072300f, -0.997300f }	},
	{	{ 0.642078f, -0.039443f, -0.055948f },	{ 0.895225f, 1.498392f, 0.000000f },	{ -0.013600f, 0.072300f, -0.997300f }	},
};
#define _Steps_vertices_
#endif
#ifndef _Steps_indices_
// Index Data follows: Sequential by mesh, Every Three Indices == One Triangle.
const unsigned int Steps_indices[84] =
{
	 0, 1, 2,
	 3, 4, 5,
	 6, 7, 8,
	 9, 10, 11,
	 12, 13, 14,
	 15, 16, 17,
	 18, 19, 20,
	 21, 22, 23,
	 24, 25, 26,
	 27, 28, 29,
	 30, 31, 32,
	 33, 34, 35,
	 36, 37, 38,
	 39, 40, 41,
	 42, 43, 44,
	 45, 46, 47,
	 48, 49, 50,
	 51, 52, 53,
	 18, 20, 54,
	 55, 56, 57,
	 58, 59, 60,
	 61, 62, 63,
	 64, 65, 66,
	 67, 68, 69,
	 70, 71, 72,
	 73, 74, 75,
	 76, 77, 78,
	 79, 80, 81,
};
#define _Steps_indices_
#endif
// Part of an OBJ_MATERIAL, the struct is 16 byte aligned so it is GPU register friendly.
#ifndef __OBJ_ATTRIBUTES__
typedef struct _OBJ_ATTRIBUTES_
{
	OBJ_VEC3    Kd; // diffuse reflectivity
	float	    d; // dissolve (transparency) 
	OBJ_VEC3    Ks; // specular reflectivity
	float       Ns; // specular exponent
	OBJ_VEC3    Ka; // ambient reflectivity
	float       sharpness; // local reflection map sharpness
	OBJ_VEC3    Tf; // transmission filter
	float       Ni; // optical density (index of refraction)
	OBJ_VEC3    Ke; // emissive reflectivity
	unsigned    illum; // illumination model
}OBJ_ATTRIBUTES;
#define __OBJ_ATTRIBUTES__
#endif
// This structure also has been made GPU register friendly so it can be transfered directly if desired.
// Note: Total struct size will vary depenedening on CPU processor architecture (string pointers).
#ifndef __OBJ_MATERIAL__
typedef struct _OBJ_MATERIAL_
{
	// The following items are typically used in a pixel/fragment shader, they are packed for GPU registers.
	OBJ_ATTRIBUTES attrib; // Surface shading characteristics & illumination model
	// All items below this line are not needed on the GPU and are generally only used during load time.
	const char* name; // the name of this material
	// If the model's materials contain any specific texture data it will be located below.
	const char* map_Kd; // diffuse texture
	const char* map_Ks; // specular texture
	const char* map_Ka; // ambient texture
	const char* map_Ke; // emissive texture
	const char* map_Ns; // specular exponent texture
	const char* map_d; // transparency texture
	const char* disp; // roughness map (displacement)
	const char* decal; // decal texture (lerps texture & material colors)
	const char* bump; // normal/bumpmap texture
	void* padding[2]; // 16 byte alignment on 32bit or 64bit
}OBJ_MATERIAL;
#define __OBJ_MATERIAL__
#endif
#ifndef _Steps_materials_
// Material Data follows: pulled from a .mtl file of the same name if present.
const OBJ_MATERIAL Steps_materials[1] =
{
	{
		{{ 0.800000f, 0.800000f, 0.800000f },
		1.000000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		225.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		60.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		1.000000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		1},
		"GreyStone2",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
	},
};
#define _Steps_materials_
#endif
/************************************************/
/*  This section contains the model's structure */
/************************************************/
#ifndef _Steps_batches_
// Use this conveinence array to batch render all geometry by like material.
// Each entry corresponds to the same entry in the materials array above.
// The two numbers provided are the IndexCount and the IndexOffset into the indices array.
// If you need more fine grained control(ex: for transformations) use the OBJ_MESH data below.
const unsigned int Steps_batches[1][2] =
{
	{ 84, 0 },
};
#define _Steps_batches_
#endif
#ifndef __OBJ_MESH__
typedef struct _OBJ_MESH_
{
	const char* name;
	unsigned    indexCount;
	unsigned    indexOffset;
	unsigned    materialIndex;
}OBJ_MESH;
#define __OBJ_MESH__
#endif
#ifndef _Steps_meshes_
// Mesh Data follows: Meshes are .obj groups sorted & split by material.
// Meshes are provided in sequential order, sorted by material first and name second.
const OBJ_MESH Steps_meshes[1] =
{
	{
		"default",
		84,
		0,
		0,
	},
};
#define _Steps_meshes_
#endif
