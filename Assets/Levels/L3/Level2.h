// "Level2.h" generated by "Obj2Header.exe" [Version 1.9d] Author: L.Norri Fullsail University.
// Data is converted to left-handed coordinate system and UV data is V flipped for Direct3D/Vulkan.
// The companion file "Level2.h2b" is a binary dump of this format(-padding) for more flexibility.
// Loading *.h2b: read version, sizes, handle strings(max len 260) by reading until null-terminated.
/***********************/
/*  Generator version  */
/***********************/
#ifndef _Level2_version_
const char Level2_version[4] = { '0','1','9','d' };
#define _Level2_version_
#endif
/************************************************/
/*  This section contains the model's size data */
/************************************************/
#ifndef _Level2_vertexcount_
const unsigned Level2_vertexcount = 60;
#define _Level2_vertexcount_
#endif
#ifndef _Level2_indexcount_
const unsigned Level2_indexcount = 198;
#define _Level2_indexcount_
#endif
#ifndef _Level2_materialcount_
const unsigned Level2_materialcount = 1; // can be used for batched draws
#define _Level2_materialcount_
#endif
#ifndef _Level2_meshcount_
const unsigned Level2_meshcount = 1;
#define _Level2_meshcount_
#endif
/************************************************/
/*  This section contains the raw data to load  */
/************************************************/
#ifndef __OBJ_VEC3__
typedef struct _OBJ_VEC3_
{
	float x,y,z; // 3D Coordinate.
}OBJ_VEC3;
#define __OBJ_VEC3__
#endif
#ifndef __OBJ_VERT__
typedef struct _OBJ_VERT_
{
	OBJ_VEC3 pos; // Left-handed +Z forward coordinate w not provided, assumed to be 1.
	OBJ_VEC3 uvw; // D3D/Vulkan style top left 0,0 coordinate.
	OBJ_VEC3 nrm; // Provided direct from obj file, may or may not be normalized.
}OBJ_VERT;
#define __OBJ_VERT__
#endif
#ifndef _Level2_vertices_
// Raw Vertex Data follows: Positions, Texture Coordinates and Normals.
const OBJ_VERT Level2_vertices[60] =
{
	{	{ -0.259163f, -0.092451f, -0.239596f },	{ 0.759257f, 0.235615f, 0.000000f },	{ -0.000000f, -1.000000f, 0.000000f }	},
	{	{ -0.259163f, -0.092451f, -0.225098f },	{ 0.759267f, 0.263202f, 0.000000f },	{ -0.000000f, -1.000000f, 0.000000f }	},
	{	{ -0.658078f, -0.092450f, -0.225098f },	{ 0.000186f, 0.263463f, 0.000000f },	{ -0.000000f, -1.000000f, 0.000000f }	},
	{	{ -0.658078f, 0.116624f, -0.239596f },	{ 0.000176f, 0.235260f, 0.000000f },	{ 0.000000f, 1.000000f, 0.000000f }	},
	{	{ -0.658078f, 0.116624f, -0.225098f },	{ 0.000176f, 0.207673f, 0.000000f },	{ 0.000000f, 1.000000f, 0.000000f }	},
	{	{ -0.259163f, 0.116624f, -0.225098f },	{ 0.759258f, 0.207674f, 0.000000f },	{ 0.000000f, 1.000000f, 0.000000f }	},
	{	{ -0.259163f, 0.090490f, -0.116054f },	{ 0.348289f, 0.999824f, 0.000000f },	{ 1.000000f, -0.000000f, -0.000000f }	},
	{	{ -0.259163f, 0.090490f, -0.146432f },	{ 0.348289f, 0.942018f, 0.000000f },	{ 1.000000f, -0.000000f, -0.000000f }	},
	{	{ -0.259163f, 0.116624f, -0.146432f },	{ 0.398019f, 0.942018f, 0.000000f },	{ 1.000000f, -0.000000f, -0.000000f }	},
	{	{ -0.259163f, -0.092450f, -0.146432f },	{ 0.759318f, 0.412893f, 0.000000f },	{ -0.000000f, -1.000000f, 0.000000f }	},
	{	{ -0.259163f, -0.092450f, -0.116054f },	{ 0.759338f, 0.470699f, 0.000000f },	{ -0.000000f, -1.000000f, 0.000000f }	},
	{	{ -0.658078f, -0.092450f, -0.116054f },	{ 0.000257f, 0.470960f, 0.000000f },	{ -0.000000f, -1.000000f, 0.000000f }	},
	{	{ -0.658078f, 0.116624f, -0.116054f },	{ 0.000176f, 0.000176f, 0.000000f },	{ 0.000000f, 1.000000f, 0.000000f }	},
	{	{ -0.259163f, 0.116624f, -0.116054f },	{ 0.759259f, 0.000177f, 0.000000f },	{ 0.000000f, 1.000000f, 0.000000f }	},
	{	{ -0.259163f, 0.116624f, -0.146432f },	{ 0.759259f, 0.057982f, 0.000000f },	{ 0.000000f, 1.000000f, 0.000000f }	},
	{	{ -0.259163f, 0.090490f, -0.225098f },	{ 0.348289f, 0.792326f, 0.000000f },	{ 1.000000f, -0.000000f, -0.000000f }	},
	{	{ -0.259163f, 0.116624f, -0.225098f },	{ 0.398019f, 0.792326f, 0.000000f },	{ 1.000000f, -0.000000f, -0.000000f }	},
	{	{ -0.658078f, -0.092450f, -0.146432f },	{ 0.000237f, 0.413154f, 0.000000f },	{ -0.000000f, -1.000000f, 0.000000f }	},
	{	{ -0.658078f, 0.116624f, -0.239596f },	{ 0.398372f, 0.764739f, 0.000000f },	{ -1.000000f, 0.000000f, 0.000000f }	},
	{	{ -0.658078f, 0.064356f, -0.306880f },	{ 0.497832f, 0.618026f, 0.000000f },	{ -1.000000f, 0.000000f, 0.000000f }	},
	{	{ -0.658078f, 0.064356f, -0.225098f },	{ 0.497832f, 0.792327f, 0.000000f },	{ -1.000000f, 0.000000f, 0.000000f }	},
	{	{ -0.658078f, 0.116624f, -0.146432f },	{ 0.000176f, 0.057982f, 0.000000f },	{ 0.000000f, 1.000000f, 0.000000f }	},
	{	{ -0.658078f, 0.116624f, -0.225098f },	{ 0.398372f, 0.792327f, 0.000000f },	{ -1.000000f, 0.000000f, 0.000000f }	},
	{	{ -0.658078f, 0.064356f, -0.146432f },	{ 0.497832f, 0.942018f, 0.000000f },	{ -1.000000f, 0.000000f, 0.000000f }	},
	{	{ -0.259163f, 0.090490f, -0.278147f },	{ 0.348289f, 0.691382f, 0.000000f },	{ 1.000000f, -0.000000f, -0.000000f }	},
	{	{ -0.259163f, 0.116624f, -0.239596f },	{ 0.398019f, 0.764739f, 0.000000f },	{ 1.000000f, -0.000000f, -0.000000f }	},
	{	{ -0.658078f, 0.064356f, -0.116054f },	{ 0.497832f, 0.999824f, 0.000000f },	{ -1.000000f, 0.000000f, 0.000000f }	},
	{	{ -0.658078f, 0.116624f, -0.116054f },	{ 0.398372f, 0.999824f, 0.000000f },	{ -1.000000f, 0.000000f, 0.000000f }	},
	{	{ -0.658078f, -0.041470f, -0.302303f },	{ 0.696754f, 0.618026f, 0.000000f },	{ -1.000000f, 0.000000f, 0.000000f }	},
	{	{ -0.658078f, -0.040182f, -0.225098f },	{ 0.696754f, 0.792327f, 0.000000f },	{ -1.000000f, 0.000000f, 0.000000f }	},
	{	{ -0.658078f, 0.012087f, -0.225098f },	{ 0.597293f, 0.792327f, 0.000000f },	{ -1.000000f, 0.000000f, 0.000000f }	},
	{	{ -0.658078f, -0.040182f, -0.146432f },	{ 0.696754f, 0.942018f, 0.000000f },	{ -1.000000f, 0.000000f, 0.000000f }	},
	{	{ -0.658078f, 0.012087f, -0.146432f },	{ 0.597293f, 0.942018f, 0.000000f },	{ -1.000000f, 0.000000f, 0.000000f }	},
	{	{ -0.658078f, -0.040182f, -0.116054f },	{ 0.696754f, 0.999824f, 0.000000f },	{ -1.000000f, 0.000000f, 0.000000f }	},
	{	{ -0.658078f, 0.012087f, -0.116054f },	{ 0.597293f, 0.999824f, 0.000000f },	{ -1.000000f, 0.000000f, 0.000000f }	},
	{	{ -0.259163f, -0.040182f, -0.116054f },	{ 0.099637f, 0.999824f, 0.000000f },	{ 1.000000f, -0.000000f, -0.000000f }	},
	{	{ -0.259163f, -0.040182f, -0.146432f },	{ 0.099637f, 0.942018f, 0.000000f },	{ 1.000000f, -0.000000f, -0.000000f }	},
	{	{ -0.259163f, 0.012087f, -0.146432f },	{ 0.199098f, 0.942018f, 0.000000f },	{ 1.000000f, -0.000000f, -0.000000f }	},
	{	{ -0.259163f, -0.040182f, -0.225098f },	{ 0.099637f, 0.792327f, 0.000000f },	{ 1.000000f, -0.000000f, -0.000000f }	},
	{	{ -0.259163f, 0.012087f, -0.225098f },	{ 0.199098f, 0.792326f, 0.000000f },	{ 1.000000f, -0.000000f, -0.000000f }	},
	{	{ -0.259163f, -0.040182f, -0.306516f },	{ 0.099637f, 0.618026f, 0.000000f },	{ 1.000000f, -0.000000f, -0.000000f }	},
	{	{ -0.259163f, 0.012087f, -0.393798f },	{ 0.199097f, 0.471312f, 0.000000f },	{ 1.000000f, -0.000000f, -0.000000f }	},
	{	{ -0.259163f, 0.012087f, -0.116054f },	{ 0.199098f, 0.999823f, 0.000000f },	{ 1.000000f, -0.000000f, -0.000000f }	},
	{	{ -0.259163f, 0.064356f, -0.146432f },	{ 0.298559f, 0.942018f, 0.000000f },	{ 1.000000f, -0.000000f, -0.000000f }	},
	{	{ -0.259163f, 0.064356f, -0.225098f },	{ 0.298558f, 0.792326f, 0.000000f },	{ 1.000000f, -0.000000f, -0.000000f }	},
	{	{ -0.259163f, 0.064356f, -0.296699f },	{ 0.298558f, 0.618026f, 0.000000f },	{ 1.000000f, -0.000000f, -0.000000f }	},
	{	{ -0.658078f, -0.092450f, -0.239596f },	{ 0.796214f, 0.764740f, 0.000000f },	{ -1.000000f, 0.000000f, 0.000000f }	},
	{	{ -0.658078f, -0.092450f, -0.225098f },	{ 0.796214f, 0.792327f, 0.000000f },	{ -1.000000f, 0.000000f, 0.000000f }	},
	{	{ -0.658078f, -0.092450f, -0.146432f },	{ 0.796214f, 0.942018f, 0.000000f },	{ -1.000000f, 0.000000f, 0.000000f }	},
	{	{ -0.658078f, -0.092450f, -0.116054f },	{ 0.796215f, 0.999824f, 0.000000f },	{ -1.000000f, 0.000000f, 0.000000f }	},
	{	{ -0.259163f, -0.092450f, -0.116054f },	{ 0.000177f, 0.999824f, 0.000000f },	{ 1.000000f, -0.000000f, -0.000000f }	},
	{	{ -0.259163f, -0.092450f, -0.146432f },	{ 0.000177f, 0.942018f, 0.000000f },	{ 1.000000f, -0.000000f, -0.000000f }	},
	{	{ -0.259163f, -0.092451f, -0.225098f },	{ 0.000176f, 0.792327f, 0.000000f },	{ 1.000000f, -0.000000f, -0.000000f }	},
	{	{ -0.259163f, -0.092451f, -0.239596f },	{ 0.000176f, 0.764740f, 0.000000f },	{ 1.000000f, -0.000000f, -0.000000f }	},
	{	{ -0.259163f, 0.064356f, -0.116054f },	{ 0.298558f, 0.999824f, 0.000000f },	{ 1.000000f, -0.000000f, -0.000000f }	},
	{	{ -0.658078f, 0.012087f, -0.388597f },	{ 0.597293f, 0.471312f, 0.000000f },	{ -1.000000f, 0.000000f, 0.000000f }	},
	{	{ -0.658078f, -0.092450f, -0.239596f },	{ 0.000176f, 0.235873f, 0.000000f },	{ -0.000000f, -1.000000f, 0.000000f }	},
	{	{ -0.259163f, 0.116624f, -0.239596f },	{ 0.759258f, 0.235263f, 0.000000f },	{ 0.000000f, 1.000000f, 0.000000f }	},
	{	{ -0.259163f, 0.116624f, -0.116054f },	{ 0.398019f, 0.999824f, 0.000000f },	{ 1.000000f, -0.000000f, -0.000000f }	},
	{	{ -0.658078f, 0.116624f, -0.146432f },	{ 0.398372f, 0.942018f, 0.000000f },	{ -1.000000f, 0.000000f, 0.000000f }	},
};
#define _Level2_vertices_
#endif
#ifndef _Level2_indices_
// Index Data follows: Sequential by mesh, Every Three Indices == One Triangle.
const unsigned int Level2_indices[198] =
{
	 0, 1, 2,
	 3, 4, 5,
	 6, 7, 8,
	 9, 10, 11,
	 12, 13, 14,
	 15, 16, 8,
	 1, 9, 17,
	 18, 19, 20,
	 4, 21, 14,
	 22, 20, 23,
	 15, 24, 25,
	 23, 26, 27,
	 28, 29, 30,
	 29, 31, 32,
	 31, 33, 34,
	 35, 36, 37,
	 36, 38, 39,
	 40, 41, 39,
	 42, 37, 43,
	 37, 39, 44,
	 39, 41, 45,
	 46, 47, 29,
	 47, 48, 31,
	 48, 49, 33,
	 50, 51, 36,
	 51, 52, 38,
	 53, 40, 38,
	 54, 43, 7,
	 43, 44, 15,
	 44, 45, 24,
	 19, 55, 30,
	 20, 30, 32,
	 32, 34, 26,
	 0, 2, 56,
	 3, 5, 57,
	 6, 8, 58,
	 9, 11, 17,
	 12, 14, 21,
	 15, 8, 7,
	 1, 17, 2,
	 18, 20, 22,
	 4, 14, 5,
	 22, 23, 59,
	 15, 25, 16,
	 23, 27, 59,
	 28, 30, 55,
	 29, 32, 30,
	 31, 34, 32,
	 35, 37, 42,
	 36, 39, 37,
	 40, 39, 38,
	 42, 43, 54,
	 37, 44, 43,
	 39, 45, 44,
	 46, 29, 28,
	 47, 31, 29,
	 48, 33, 31,
	 50, 36, 35,
	 51, 38, 36,
	 53, 38, 52,
	 54, 7, 6,
	 43, 15, 7,
	 44, 24, 15,
	 19, 30, 20,
	 20, 32, 23,
	 32, 26, 23,
};
#define _Level2_indices_
#endif
// Part of an OBJ_MATERIAL, the struct is 16 byte aligned so it is GPU register friendly.
#ifndef __OBJ_ATTRIBUTES__
typedef struct _OBJ_ATTRIBUTES_
{
	OBJ_VEC3    Kd; // diffuse reflectivity
	float	    d; // dissolve (transparency) 
	OBJ_VEC3    Ks; // specular reflectivity
	float       Ns; // specular exponent
	OBJ_VEC3    Ka; // ambient reflectivity
	float       sharpness; // local reflection map sharpness
	OBJ_VEC3    Tf; // transmission filter
	float       Ni; // optical density (index of refraction)
	OBJ_VEC3    Ke; // emissive reflectivity
	unsigned    illum; // illumination model
}OBJ_ATTRIBUTES;
#define __OBJ_ATTRIBUTES__
#endif
// This structure also has been made GPU register friendly so it can be transfered directly if desired.
// Note: Total struct size will vary depenedening on CPU processor architecture (string pointers).
#ifndef __OBJ_MATERIAL__
typedef struct _OBJ_MATERIAL_
{
	// The following items are typically used in a pixel/fragment shader, they are packed for GPU registers.
	OBJ_ATTRIBUTES attrib; // Surface shading characteristics & illumination model
	// All items below this line are not needed on the GPU and are generally only used during load time.
	const char* name; // the name of this material
	// If the model's materials contain any specific texture data it will be located below.
	const char* map_Kd; // diffuse texture
	const char* map_Ks; // specular texture
	const char* map_Ka; // ambient texture
	const char* map_Ke; // emissive texture
	const char* map_Ns; // specular exponent texture
	const char* map_d; // transparency texture
	const char* disp; // roughness map (displacement)
	const char* decal; // decal texture (lerps texture & material colors)
	const char* bump; // normal/bumpmap texture
	void* padding[2]; // 16 byte alignment on 32bit or 64bit
}OBJ_MATERIAL;
#define __OBJ_MATERIAL__
#endif
#ifndef _Level2_materials_
// Material Data follows: pulled from a .mtl file of the same name if present.
const OBJ_MATERIAL Level2_materials[1] =
{
	{
		{{ 0.800000f, 0.800000f, 0.800000f },
		1.000000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		225.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		60.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		1.000000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		1},
		"Plaster",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
	},
};
#define _Level2_materials_
#endif
/************************************************/
/*  This section contains the model's structure */
/************************************************/
#ifndef _Level2_batches_
// Use this conveinence array to batch render all geometry by like material.
// Each entry corresponds to the same entry in the materials array above.
// The two numbers provided are the IndexCount and the IndexOffset into the indices array.
// If you need more fine grained control(ex: for transformations) use the OBJ_MESH data below.
const unsigned int Level2_batches[1][2] =
{
	{ 198, 0 },
};
#define _Level2_batches_
#endif
#ifndef __OBJ_MESH__
typedef struct _OBJ_MESH_
{
	const char* name;
	unsigned    indexCount;
	unsigned    indexOffset;
	unsigned    materialIndex;
}OBJ_MESH;
#define __OBJ_MESH__
#endif
#ifndef _Level2_meshes_
// Mesh Data follows: Meshes are .obj groups sorted & split by material.
// Meshes are provided in sequential order, sorted by material first and name second.
const OBJ_MESH Level2_meshes[1] =
{
	{
		"default",
		198,
		0,
		0,
	},
};
#define _Level2_meshes_
#endif
