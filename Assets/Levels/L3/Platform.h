// "Platform.h" generated by "Obj2Header.exe" [Version 1.9d] Author: L.Norri Fullsail University.
// Data is converted to left-handed coordinate system and UV data is V flipped for Direct3D/Vulkan.
// The companion file "Platform.h2b" is a binary dump of this format(-padding) for more flexibility.
// Loading *.h2b: read version, sizes, handle strings(max len 260) by reading until null-terminated.
/***********************/
/*  Generator version  */
/***********************/
#ifndef _Platform_version_
const char Platform_version[4] = { '0','1','9','d' };
#define _Platform_version_
#endif
/************************************************/
/*  This section contains the model's size data */
/************************************************/
#ifndef _Platform_vertexcount_
const unsigned Platform_vertexcount = 61;
#define _Platform_vertexcount_
#endif
#ifndef _Platform_indexcount_
const unsigned Platform_indexcount = 132;
#define _Platform_indexcount_
#endif
#ifndef _Platform_materialcount_
const unsigned Platform_materialcount = 1; // can be used for batched draws
#define _Platform_materialcount_
#endif
#ifndef _Platform_meshcount_
const unsigned Platform_meshcount = 1;
#define _Platform_meshcount_
#endif
/************************************************/
/*  This section contains the raw data to load  */
/************************************************/
#ifndef __OBJ_VEC3__
typedef struct _OBJ_VEC3_
{
	float x,y,z; // 3D Coordinate.
}OBJ_VEC3;
#define __OBJ_VEC3__
#endif
#ifndef __OBJ_VERT__
typedef struct _OBJ_VERT_
{
	OBJ_VEC3 pos; // Left-handed +Z forward coordinate w not provided, assumed to be 1.
	OBJ_VEC3 uvw; // D3D/Vulkan style top left 0,0 coordinate.
	OBJ_VEC3 nrm; // Provided direct from obj file, may or may not be normalized.
}OBJ_VERT;
#define __OBJ_VERT__
#endif
#ifndef _Platform_vertices_
// Raw Vertex Data follows: Positions, Texture Coordinates and Normals.
const OBJ_VERT Platform_vertices[61] =
{
	{	{ -1.207539f, 0.077913f, 0.249364f },	{ -0.489627f, 0.842295f, 0.000000f },	{ -1.000000f, 0.000000f, -0.000000f }	},
	{	{ -1.207538f, 0.077913f, -0.163077f },	{ 1.695643f, 0.842295f, 0.000000f },	{ -1.000000f, 0.000000f, -0.000000f }	},
	{	{ -1.207538f, 0.067556f, -0.163077f },	{ 1.695643f, 0.897164f, 0.000000f },	{ -1.000000f, 0.000000f, -0.000000f }	},
	{	{ -1.132458f, 0.098329f, 0.249364f },	{ 0.237674f, 0.051433f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ -1.207539f, 0.098329f, 0.249364f },	{ 0.237673f, 0.459364f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ -1.207539f, 0.098329f, 0.261926f },	{ 0.172767f, 0.459364f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ -1.207539f, 0.108981f, 0.249364f },	{ -0.489627f, 0.677679f, 0.000000f },	{ -1.000000f, 0.000000f, -0.000000f }	},
	{	{ -1.207538f, 0.108981f, -0.163077f },	{ 1.695644f, 0.677686f, 0.000000f },	{ -1.000000f, 0.000000f, -0.000000f }	},
	{	{ -1.207538f, 0.098329f, -0.163077f },	{ 1.695644f, 0.734122f, 0.000000f },	{ -1.000000f, 0.000000f, -0.000000f }	},
	{	{ -1.132458f, 0.108981f, 0.249364f },	{ 0.300006f, 0.061741f, 0.000000f },	{ 0.000000f, 0.000000f, 1.000000f }	},
	{	{ -1.207539f, 0.108981f, 0.249364f },	{ 0.300005f, 0.469672f, 0.000000f },	{ 0.000000f, 0.000000f, 1.000000f }	},
	{	{ -1.207539f, 0.098329f, 0.249364f },	{ 0.244968f, 0.469672f, 0.000000f },	{ 0.000000f, 0.000000f, 1.000000f }	},
	{	{ -1.132458f, 0.088269f, 0.261926f },	{ 0.148719f, 0.104120f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ -1.207539f, 0.088269f, 0.261926f },	{ 0.148719f, 0.512051f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ -1.207539f, 0.088269f, 0.274488f },	{ 0.083813f, 0.512051f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ -1.207539f, 0.098329f, 0.249364f },	{ -0.489627f, 0.734119f, 0.000000f },	{ -1.000000f, 0.000000f, -0.000000f }	},
	{	{ -1.207539f, 0.088269f, 0.249364f },	{ -0.489627f, 0.787423f, 0.000000f },	{ -1.000000f, 0.000000f, -0.000000f }	},
	{	{ -1.207539f, 0.088269f, 0.261926f },	{ -0.556186f, 0.787423f, 0.000000f },	{ -1.000000f, 0.000000f, -0.000000f }	},
	{	{ -1.207538f, 0.088269f, -0.163077f },	{ 1.695644f, 0.787426f, 0.000000f },	{ -1.000000f, 0.000000f, -0.000000f }	},
	{	{ -1.132458f, 0.098329f, 0.261926f },	{ 0.064112f, 0.512674f, 0.000000f },	{ 0.000000f, 0.000000f, 1.000000f }	},
	{	{ -1.207539f, 0.098329f, 0.261926f },	{ 0.064112f, 0.920605f, 0.000000f },	{ 0.000000f, 0.000000f, 1.000000f }	},
	{	{ -1.207539f, 0.088269f, 0.261926f },	{ 0.012132f, 0.920605f, 0.000000f },	{ 0.000000f, 0.000000f, 1.000000f }	},
	{	{ -1.207539f, 0.077913f, 0.261926f },	{ -0.556186f, 0.842295f, 0.000000f },	{ -1.000000f, 0.000000f, -0.000000f }	},
	{	{ -1.132458f, 0.077913f, 0.274488f },	{ 0.083220f, 0.104120f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ -1.207539f, 0.077913f, 0.274488f },	{ 0.083220f, 0.512051f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ -1.207539f, 0.077913f, 0.288246f },	{ 0.012132f, 0.512051f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ -1.207539f, 0.077913f, 0.274488f },	{ -0.622746f, 0.842295f, 0.000000f },	{ -1.000000f, 0.000000f, -0.000000f }	},
	{	{ -1.207539f, 0.067556f, 0.249364f },	{ -0.489627f, 0.897167f, 0.000000f },	{ -1.000000f, 0.000000f, -0.000000f }	},
	{	{ -1.207539f, 0.067556f, 0.261926f },	{ -0.556186f, 0.897167f, 0.000000f },	{ -1.000000f, 0.000000f, -0.000000f }	},
	{	{ -1.132458f, 0.088269f, 0.274488f },	{ 0.378680f, 0.052578f, 0.000000f },	{ 0.000000f, 0.000000f, 1.000000f }	},
	{	{ -1.207539f, 0.088269f, 0.274488f },	{ 0.378680f, 0.460509f, 0.000000f },	{ 0.000000f, 0.000000f, 1.000000f }	},
	{	{ -1.207539f, 0.077913f, 0.274488f },	{ 0.325171f, 0.460509f, 0.000000f },	{ 0.000000f, 0.000000f, 1.000000f }	},
	{	{ -1.207539f, 0.067556f, 0.274488f },	{ -0.622746f, 0.897167f, 0.000000f },	{ -1.000000f, 0.000000f, -0.000000f }	},
	{	{ -1.132458f, 0.077913f, 0.288247f },	{ 0.378051f, 0.104120f, 0.000000f },	{ 0.000000f, 0.000000f, 1.000000f }	},
	{	{ -1.207539f, 0.077913f, 0.288246f },	{ 0.378051f, 0.512051f, 0.000000f },	{ 0.000000f, 0.000000f, 1.000000f }	},
	{	{ -1.207539f, 0.067556f, 0.288246f },	{ 0.324542f, 0.512051f, 0.000000f },	{ 0.000000f, 0.000000f, 1.000000f }	},
	{	{ -1.207539f, 0.067556f, 0.288246f },	{ -0.695644f, 0.897167f, 0.000000f },	{ -1.000000f, 0.000000f, -0.000000f }	},
	{	{ -1.207539f, 0.108981f, 0.249364f },	{ 1.489627f, 0.897775f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ -1.132458f, 0.108981f, 0.249364f },	{ 1.489627f, 1.295581f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ -1.132458f, 0.108981f, -0.163077f },	{ -0.695644f, 1.295581f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ -1.132458f, 0.098329f, -0.163077f },	{ -0.779868f, 0.532829f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ -1.207538f, 0.108981f, -0.163077f },	{ -0.391938f, 0.590704f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ -1.132458f, 0.108981f, -0.163077f },	{ -0.779868f, 0.590704f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ -1.132458f, 0.098329f, 0.261926f },	{ 0.172768f, 0.051433f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ -1.132458f, 0.098329f, 0.249364f },	{ 0.244968f, 0.061741f, 0.000000f },	{ 0.000000f, 0.000000f, 1.000000f }	},
	{	{ -1.132458f, 0.088269f, 0.274488f },	{ 0.083813f, 0.104120f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ -1.207539f, 0.098329f, 0.261926f },	{ -0.556186f, 0.734119f, 0.000000f },	{ -1.000000f, 0.000000f, -0.000000f }	},
	{	{ -1.132458f, 0.088269f, 0.261926f },	{ 0.012132f, 0.512674f, 0.000000f },	{ 0.000000f, 0.000000f, 1.000000f }	},
	{	{ -1.132458f, 0.077913f, 0.288247f },	{ 0.012133f, 0.104120f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ -1.207539f, 0.088269f, 0.274488f },	{ -0.622746f, 0.787423f, 0.000000f },	{ -1.000000f, 0.000000f, -0.000000f }	},
	{	{ -1.132458f, 0.077913f, 0.274488f },	{ 0.325171f, 0.052578f, 0.000000f },	{ 0.000000f, 0.000000f, 1.000000f }	},
	{	{ -1.132458f, 0.067556f, 0.288247f },	{ 0.324542f, 0.104121f, 0.000000f },	{ 0.000000f, 0.000000f, 1.000000f }	},
	{	{ -1.207539f, 0.077913f, 0.288246f },	{ -0.695644f, 0.842295f, 0.000000f },	{ -1.000000f, 0.000000f, -0.000000f }	},
	{	{ -1.207538f, 0.108981f, -0.163077f },	{ -0.695644f, 0.897776f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ -1.207538f, 0.077913f, -0.163077f },	{ -0.391937f, 0.421902f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ -1.132458f, 0.067556f, -0.163077f },	{ -0.779868f, 0.365634f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ -1.207538f, 0.067556f, -0.163077f },	{ -0.391937f, 0.365634f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ -1.132458f, 0.077913f, -0.163077f },	{ -0.779868f, 0.421901f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ -1.207538f, 0.088269f, -0.163077f },	{ -0.391938f, 0.478169f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ -1.132458f, 0.088269f, -0.163077f },	{ -0.779868f, 0.478169f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ -1.207538f, 0.098329f, -0.163077f },	{ -0.391938f, 0.532829f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
};
#define _Platform_vertices_
#endif
#ifndef _Platform_indices_
// Index Data follows: Sequential by mesh, Every Three Indices == One Triangle.
const unsigned int Platform_indices[132] =
{
	 0, 1, 2,
	 3, 4, 5,
	 6, 7, 8,
	 9, 10, 11,
	 12, 13, 14,
	 15, 16, 17,
	 15, 8, 18,
	 19, 20, 21,
	 16, 0, 22,
	 23, 24, 25,
	 17, 22, 26,
	 16, 18, 1,
	 0, 27, 28,
	 29, 30, 31,
	 22, 28, 32,
	 33, 34, 35,
	 26, 32, 36,
	 37, 38, 39,
	 40, 41, 42,
	 0, 2, 27,
	 3, 5, 43,
	 6, 8, 15,
	 9, 11, 44,
	 12, 14, 45,
	 15, 17, 46,
	 15, 18, 16,
	 19, 21, 47,
	 16, 22, 17,
	 23, 25, 48,
	 17, 26, 49,
	 16, 1, 0,
	 0, 28, 22,
	 29, 31, 50,
	 22, 32, 26,
	 33, 35, 51,
	 26, 36, 52,
	 37, 39, 53,
	 54, 55, 56,
	 57, 58, 59,
	 59, 58, 40,
	 54, 57, 55,
	 41, 40, 60,
	 60, 40, 58,
	 58, 57, 54,
};
#define _Platform_indices_
#endif
// Part of an OBJ_MATERIAL, the struct is 16 byte aligned so it is GPU register friendly.
#ifndef __OBJ_ATTRIBUTES__
typedef struct _OBJ_ATTRIBUTES_
{
	OBJ_VEC3    Kd; // diffuse reflectivity
	float	    d; // dissolve (transparency) 
	OBJ_VEC3    Ks; // specular reflectivity
	float       Ns; // specular exponent
	OBJ_VEC3    Ka; // ambient reflectivity
	float       sharpness; // local reflection map sharpness
	OBJ_VEC3    Tf; // transmission filter
	float       Ni; // optical density (index of refraction)
	OBJ_VEC3    Ke; // emissive reflectivity
	unsigned    illum; // illumination model
}OBJ_ATTRIBUTES;
#define __OBJ_ATTRIBUTES__
#endif
// This structure also has been made GPU register friendly so it can be transfered directly if desired.
// Note: Total struct size will vary depenedening on CPU processor architecture (string pointers).
#ifndef __OBJ_MATERIAL__
typedef struct _OBJ_MATERIAL_
{
	// The following items are typically used in a pixel/fragment shader, they are packed for GPU registers.
	OBJ_ATTRIBUTES attrib; // Surface shading characteristics & illumination model
	// All items below this line are not needed on the GPU and are generally only used during load time.
	const char* name; // the name of this material
	// If the model's materials contain any specific texture data it will be located below.
	const char* map_Kd; // diffuse texture
	const char* map_Ks; // specular texture
	const char* map_Ka; // ambient texture
	const char* map_Ke; // emissive texture
	const char* map_Ns; // specular exponent texture
	const char* map_d; // transparency texture
	const char* disp; // roughness map (displacement)
	const char* decal; // decal texture (lerps texture & material colors)
	const char* bump; // normal/bumpmap texture
	void* padding[2]; // 16 byte alignment on 32bit or 64bit
}OBJ_MATERIAL;
#define __OBJ_MATERIAL__
#endif
#ifndef _Platform_materials_
// Material Data follows: pulled from a .mtl file of the same name if present.
const OBJ_MATERIAL Platform_materials[1] =
{
	{
		{{ 0.087140f, 0.044223f, 0.017671f },
		1.000000f,
		{ 0.500000f, 0.500000f, 0.500000f },
		225.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		60.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		1.450000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		2},
		"Wood.005",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
	},
};
#define _Platform_materials_
#endif
/************************************************/
/*  This section contains the model's structure */
/************************************************/
#ifndef _Platform_batches_
// Use this conveinence array to batch render all geometry by like material.
// Each entry corresponds to the same entry in the materials array above.
// The two numbers provided are the IndexCount and the IndexOffset into the indices array.
// If you need more fine grained control(ex: for transformations) use the OBJ_MESH data below.
const unsigned int Platform_batches[1][2] =
{
	{ 132, 0 },
};
#define _Platform_batches_
#endif
#ifndef __OBJ_MESH__
typedef struct _OBJ_MESH_
{
	const char* name;
	unsigned    indexCount;
	unsigned    indexOffset;
	unsigned    materialIndex;
}OBJ_MESH;
#define __OBJ_MESH__
#endif
#ifndef _Platform_meshes_
// Mesh Data follows: Meshes are .obj groups sorted & split by material.
// Meshes are provided in sequential order, sorted by material first and name second.
const OBJ_MESH Platform_meshes[1] =
{
	{
		"default",
		132,
		0,
		0,
	},
};
#define _Platform_meshes_
#endif
