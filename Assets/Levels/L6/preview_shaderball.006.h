// "preview_shaderball.006.h" generated by "Obj2Header.exe" [Version 1.9d] Author: L.Norri Fullsail University.
// Data is converted to left-handed coordinate system and UV data is V flipped for Direct3D/Vulkan.
// The companion file "preview_shaderball.006.h2b" is a binary dump of this format(-padding) for more flexibility.
// Loading *.h2b: read version, sizes, handle strings(max len 260) by reading until null-terminated.
/***********************/
/*  Generator version  */
/***********************/
#ifndef _preview_shaderball_006_version_
const char preview_shaderball_006_version[4] = { '0','1','9','d' };
#define _preview_shaderball_006_version_
#endif
/************************************************/
/*  This section contains the model's size data */
/************************************************/
#ifndef _preview_shaderball_006_vertexcount_
const unsigned preview_shaderball_006_vertexcount = 56;
#define _preview_shaderball_006_vertexcount_
#endif
#ifndef _preview_shaderball_006_indexcount_
const unsigned preview_shaderball_006_indexcount = 297;
#define _preview_shaderball_006_indexcount_
#endif
#ifndef _preview_shaderball_006_materialcount_
const unsigned preview_shaderball_006_materialcount = 1; // can be used for batched draws
#define _preview_shaderball_006_materialcount_
#endif
#ifndef _preview_shaderball_006_meshcount_
const unsigned preview_shaderball_006_meshcount = 1;
#define _preview_shaderball_006_meshcount_
#endif
/************************************************/
/*  This section contains the raw data to load  */
/************************************************/
#ifndef __OBJ_VEC3__
typedef struct _OBJ_VEC3_
{
	float x,y,z; // 3D Coordinate.
}OBJ_VEC3;
#define __OBJ_VEC3__
#endif
#ifndef __OBJ_VERT__
typedef struct _OBJ_VERT_
{
	OBJ_VEC3 pos; // Left-handed +Z forward coordinate w not provided, assumed to be 1.
	OBJ_VEC3 uvw; // D3D/Vulkan style top left 0,0 coordinate.
	OBJ_VEC3 nrm; // Provided direct from obj file, may or may not be normalized.
}OBJ_VERT;
#define __OBJ_VERT__
#endif
#ifndef _preview_shaderball_006_vertices_
// Raw Vertex Data follows: Positions, Texture Coordinates and Normals.
const OBJ_VERT preview_shaderball_006_vertices[56] =
{
	{	{ 0.396532f, 0.763327f, -1.552156f },	{ 0.516540f, 0.193383f, 0.000000f },	{ 0.833200f, 0.415000f, -0.365500f }	},
	{	{ 0.387632f, 0.772821f, -1.558750f },	{ 0.511779f, 0.187125f, 0.000000f },	{ 0.648100f, 0.499300f, -0.575000f }	},
	{	{ 0.381690f, 0.789931f, -1.545800f },	{ 0.517777f, 0.178254f, 0.000000f },	{ 0.597400f, 0.677400f, -0.429300f }	},
	{	{ 0.378302f, 0.807417f, -1.502171f },	{ 0.538562f, 0.170116f, 0.000000f },	{ 0.578700f, 0.812100f, -0.074400f }	},
	{	{ 0.380546f, 0.803766f, -1.471941f },	{ 0.553156f, 0.171668f, 0.000000f },	{ 0.439700f, 0.853700f, 0.279000f }	},
	{	{ 0.396488f, 0.785150f, -1.484577f },	{ 0.546794f, 0.183219f, 0.000000f },	{ 0.845600f, 0.533800f, -0.006200f }	},
	{	{ 0.411116f, 0.753394f, -1.461244f },	{ 0.558533f, 0.198210f, 0.000000f },	{ 0.920300f, 0.376100f, 0.107300f }	},
	{	{ 0.406764f, 0.752668f, -1.439999f },	{ 0.568158f, 0.197968f, 0.000000f },	{ 0.739200f, 0.254000f, 0.623800f }	},
	{	{ 0.418313f, 0.729761f, -1.456697f },	{ 0.560809f, 0.207608f, 0.000000f },	{ 0.950900f, 0.083800f, 0.297900f }	},
	{	{ 0.369424f, 0.810182f, -1.505091f },	{ 0.537090f, 0.164554f, 0.000000f },	{ -0.059200f, 0.995200f, -0.077800f }	},
	{	{ 0.370338f, 0.806962f, -1.521682f },	{ 0.528905f, 0.166349f, 0.000000f },	{ -0.031700f, 0.950000f, -0.310800f }	},
	{	{ 0.328216f, 0.792949f, -1.503456f },	{ 0.534261f, 0.135677f, 0.000000f },	{ -0.424700f, 0.902000f, -0.077900f }	},
	{	{ 0.416977f, 0.740510f, -1.489627f },	{ 0.546299f, 0.204990f, 0.000000f },	{ 0.950500f, 0.309300f, -0.029000f }	},
	{	{ 0.400857f, 0.775593f, -1.463088f },	{ 0.557475f, 0.187837f, 0.000000f },	{ 0.868300f, 0.483700f, 0.109700f }	},
	{	{ 0.390849f, 0.788187f, -1.521093f },	{ 0.530040f, 0.180814f, 0.000000f },	{ 0.816200f, 0.553200f, -0.166800f }	},
	{	{ 0.402651f, 0.766366f, -1.521720f },	{ 0.531548f, 0.192682f, 0.000000f },	{ 0.892100f, 0.426600f, -0.148800f }	},
	{	{ 0.388112f, 0.792423f, -1.456005f },	{ 0.560691f, 0.178242f, 0.000000f },	{ 0.560500f, 0.744000f, 0.363800f }	},
	{	{ 0.397143f, 0.773091f, -1.441877f },	{ 0.567031f, 0.187704f, 0.000000f },	{ 0.623000f, 0.499400f, 0.602000f }	},
	{	{ 0.410108f, 0.723228f, -1.549882f },	{ 0.516791f, 0.212724f, 0.000000f },	{ 0.809700f, -0.139600f, -0.569900f }	},
	{	{ 0.401202f, 0.742482f, -1.560037f },	{ 0.511931f, 0.203040f, 0.000000f },	{ 0.786300f, 0.165400f, -0.595300f }	},
	{	{ 0.409396f, 0.741719f, -1.538949f },	{ 0.522776f, 0.204414f, 0.000000f },	{ 0.920000f, 0.299100f, -0.253300f }	},
	{	{ 0.417006f, 0.730308f, -1.519846f },	{ 0.532269f, 0.209990f, 0.000000f },	{ 0.955700f, 0.243600f, -0.165200f }	},
	{	{ 0.422590f, 0.709250f, -1.506422f },	{ 0.538509f, 0.219876f, 0.000000f },	{ 0.993000f, -0.054100f, -0.105200f }	},
	{	{ 0.417225f, 0.710251f, -1.531849f },	{ 0.526157f, 0.219515f, 0.000000f },	{ 0.873800f, -0.258900f, -0.411500f }	},
	{	{ 0.419761f, 0.704294f, -1.479096f },	{ 0.551752f, 0.222450f, 0.000000f },	{ 0.696500f, -0.655100f, 0.292800f }	},
	{	{ 0.414964f, 0.711228f, -1.461952f },	{ 0.560583f, 0.218792f, 0.000000f },	{ 0.543200f, -0.620900f, 0.565200f }	},
	{	{ 0.379633f, 0.684787f, -1.475238f },	{ 0.563238f, 0.248678f, 0.000000f },	{ 0.392500f, -0.855400f, 0.337900f }	},
	{	{ 0.395731f, 0.738823f, -1.564578f },	{ 0.507362f, 0.204491f, 0.000000f },	{ 0.355900f, -0.170000f, -0.918900f }	},
	{	{ 0.390522f, 0.754683f, -1.566696f },	{ 0.506583f, 0.196463f, 0.000000f },	{ 0.362500f, 0.188800f, -0.912600f }	},
	{	{ 0.420767f, 0.716013f, -1.465196f },	{ 0.557648f, 0.215796f, 0.000000f },	{ 0.913200f, -0.221200f, 0.342300f }	},
	{	{ 0.423556f, 0.707086f, -1.490359f },	{ 0.546659f, 0.220712f, 0.000000f },	{ 0.978700f, -0.198400f, 0.052200f }	},
	{	{ 0.377098f, 0.802572f, -1.527386f },	{ 0.526585f, 0.171559f, 0.000000f },	{ 0.515400f, 0.800300f, -0.306400f }	},
	{	{ 0.345857f, 0.766674f, -1.440784f },	{ 0.590673f, 0.165718f, 0.000000f },	{ -0.175700f, 0.507600f, 0.843500f }	},
	{	{ 0.390574f, 0.770188f, -1.437879f },	{ 0.571036f, 0.186844f, 0.000000f },	{ 0.143200f, 0.358900f, 0.922300f }	},
	{	{ 0.383335f, 0.789949f, -1.449742f },	{ 0.564651f, 0.176897f, 0.000000f },	{ 0.084500f, 0.707200f, 0.702000f }	},
	{	{ 0.371327f, 0.797851f, -1.540361f },	{ 0.518683f, 0.170616f, 0.000000f },	{ -0.062400f, 0.829800f, -0.554600f }	},
	{	{ 0.376172f, 0.787646f, -1.552604f },	{ 0.512880f, 0.176697f, 0.000000f },	{ 0.048300f, 0.685400f, -0.726600f }	},
	{	{ 0.338820f, 0.758269f, -1.558162f },	{ 0.478989f, 0.170232f, 0.000000f },	{ -0.260700f, 0.352100f, -0.898900f }	},
	{	{ 0.381090f, 0.775273f, -1.561362f },	{ 0.508465f, 0.184782f, 0.000000f },	{ 0.141500f, 0.509800f, -0.848600f }	},
	{	{ 0.399863f, 0.748804f, -1.436018f },	{ 0.572367f, 0.198184f, 0.000000f },	{ 0.292400f, -0.011300f, 0.956200f }	},
	{	{ 0.360682f, 0.735731f, -1.431454f },	{ 0.598760f, 0.196844f, 0.000000f },	{ 0.081300f, -0.035700f, 0.996000f }	},
	{	{ 0.355256f, 0.721007f, -1.562310f },	{ 0.478306f, 0.213898f, 0.000000f },	{ 0.005100f, -0.287800f, -0.957700f }	},
	{	{ 0.381161f, 0.764946f, -1.564776f },	{ 0.505156f, 0.188680f, 0.000000f },	{ -0.050900f, 0.220000f, -0.974200f }	},
	{	{ 0.372838f, 0.706170f, -1.444294f },	{ 0.589416f, 0.226498f, 0.000000f },	{ 0.288600f, -0.541500f, 0.789600f }	},
	{	{ 0.410628f, 0.723295f, -1.448695f },	{ 0.567083f, 0.212169f, 0.000000f },	{ 0.548000f, -0.462100f, 0.697200f }	},
	{	{ 0.410886f, 0.732983f, -1.443353f },	{ 0.567974f, 0.207596f, 0.000000f },	{ 0.620300f, -0.187000f, 0.761800f }	},
	{	{ 0.334878f, 0.785946f, -1.465505f },	{ 0.569687f, 0.143956f, 0.000000f },	{ -0.343800f, 0.815000f, 0.466500f }	},
	{	{ 0.372980f, 0.802833f, -1.469014f },	{ 0.555496f, 0.168112f, 0.000000f },	{ -0.147200f, 0.865500f, 0.478800f }	},
	{	{ 0.373371f, 0.809598f, -1.486823f },	{ 0.545977f, 0.166761f, 0.000000f },	{ 0.066400f, 0.984200f, 0.163800f }	},
	{	{ 0.419254f, 0.701942f, -1.516331f },	{ 0.533769f, 0.223916f, 0.000000f },	{ 0.751900f, -0.614400f, -0.239100f }	},
	{	{ 0.411160f, 0.704932f, -1.533388f },	{ 0.524051f, 0.223347f, 0.000000f },	{ 0.478600f, -0.717800f, -0.505700f }	},
	{	{ 0.419899f, 0.699859f, -1.498023f },	{ 0.542604f, 0.225360f, 0.000000f },	{ 0.701700f, -0.712500f, 0.001900f }	},
	{	{ 0.378194f, 0.681436f, -1.507245f },	{ 0.534360f, 0.254679f, 0.000000f },	{ 0.379800f, -0.913200f, -0.147800f }	},
	{	{ 0.403060f, 0.718861f, -1.552868f },	{ 0.513249f, 0.215591f, 0.000000f },	{ 0.378000f, -0.514800f, -0.769500f }	},
	{	{ 0.371127f, 0.691012f, -1.537006f },	{ 0.505460f, 0.245791f, 0.000000f },	{ 0.260500f, -0.763200f, -0.591300f }	},
	{	{ 0.331105f, 0.779713f, -1.536900f },	{ 0.500410f, 0.145038f, 0.000000f },	{ -0.380000f, 0.735800f, -0.560500f }	},
};
#define _preview_shaderball_006_vertices_
#endif
#ifndef _preview_shaderball_006_indices_
// Index Data follows: Sequential by mesh, Every Three Indices == One Triangle.
const unsigned int preview_shaderball_006_indices[297] =
{
	 0, 1, 2,
	 3, 4, 5,
	 6, 7, 8,
	 9, 10, 11,
	 8, 12, 6,
	 13, 7, 6,
	 0, 14, 15,
	 16, 17, 13,
	 18, 19, 20,
	 21, 18, 20,
	 22, 23, 21,
	 24, 25, 26,
	 27, 28, 19,
	 19, 28, 0,
	 18, 27, 19,
	 8, 29, 30,
	 14, 31, 3,
	 5, 16, 13,
	 32, 33, 34,
	 35, 36, 37,
	 37, 36, 38,
	 39, 33, 40,
	 28, 27, 41,
	 21, 15, 12,
	 5, 15, 14,
	 38, 42, 37,
	 37, 42, 28,
	 43, 25, 44,
	 43, 44, 45,
	 46, 47, 48,
	 11, 48, 9,
	 49, 50, 23,
	 15, 5, 12,
	 24, 30, 29,
	 51, 30, 24,
	 7, 17, 33,
	 45, 44, 25,
	 45, 39, 40,
	 7, 39, 45,
	 34, 33, 17,
	 47, 34, 16,
	 42, 38, 28,
	 48, 47, 4,
	 35, 31, 2,
	 50, 49, 52,
	 52, 49, 51,
	 27, 53, 41,
	 50, 53, 18,
	 10, 3, 31,
	 53, 50, 54,
	 34, 47, 46,
	 13, 6, 12,
	 38, 1, 28,
	 11, 10, 35,
	 45, 8, 7,
	 36, 2, 1,
	 15, 20, 0,
	 2, 31, 14,
	 0, 2, 14,
	 19, 0, 20,
	 3, 5, 14,
	 17, 7, 13,
	 30, 22, 12,
	 23, 18, 21,
	 26, 25, 43,
	 8, 30, 12,
	 4, 16, 5,
	 35, 37, 55,
	 33, 32, 40,
	 51, 49, 22,
	 49, 23, 22,
	 21, 12, 22,
	 37, 28, 41,
	 46, 48, 11,
	 24, 29, 25,
	 7, 33, 39,
	 45, 25, 29,
	 45, 40, 43,
	 20, 15, 21,
	 47, 16, 4,
	 10, 31, 35,
	 35, 2, 36,
	 50, 52, 54,
	 53, 54, 41,
	 53, 27, 18,
	 34, 17, 16,
	 50, 18, 23,
	 51, 26, 52,
	 24, 26, 51,
	 9, 3, 10,
	 34, 46, 32,
	 9, 48, 3,
	 48, 4, 3,
	 13, 12, 5,
	 1, 0, 28,
	 30, 51, 22,
	 11, 35, 55,
	 29, 8, 45,
	 36, 1, 38,
};
#define _preview_shaderball_006_indices_
#endif
// Part of an OBJ_MATERIAL, the struct is 16 byte aligned so it is GPU register friendly.
#ifndef __OBJ_ATTRIBUTES__
typedef struct _OBJ_ATTRIBUTES_
{
	OBJ_VEC3    Kd; // diffuse reflectivity
	float	    d; // dissolve (transparency) 
	OBJ_VEC3    Ks; // specular reflectivity
	float       Ns; // specular exponent
	OBJ_VEC3    Ka; // ambient reflectivity
	float       sharpness; // local reflection map sharpness
	OBJ_VEC3    Tf; // transmission filter
	float       Ni; // optical density (index of refraction)
	OBJ_VEC3    Ke; // emissive reflectivity
	unsigned    illum; // illumination model
}OBJ_ATTRIBUTES;
#define __OBJ_ATTRIBUTES__
#endif
// This structure also has been made GPU register friendly so it can be transfered directly if desired.
// Note: Total struct size will vary depenedening on CPU processor architecture (string pointers).
#ifndef __OBJ_MATERIAL__
typedef struct _OBJ_MATERIAL_
{
	// The following items are typically used in a pixel/fragment shader, they are packed for GPU registers.
	OBJ_ATTRIBUTES attrib; // Surface shading characteristics & illumination model
	// All items below this line are not needed on the GPU and are generally only used during load time.
	const char* name; // the name of this material
	// If the model's materials contain any specific texture data it will be located below.
	const char* map_Kd; // diffuse texture
	const char* map_Ks; // specular texture
	const char* map_Ka; // ambient texture
	const char* map_Ke; // emissive texture
	const char* map_Ns; // specular exponent texture
	const char* map_d; // transparency texture
	const char* disp; // roughness map (displacement)
	const char* decal; // decal texture (lerps texture & material colors)
	const char* bump; // normal/bumpmap texture
	void* padding[2]; // 16 byte alignment on 32bit or 64bit
}OBJ_MATERIAL;
#define __OBJ_MATERIAL__
#endif
#ifndef _preview_shaderball_006_materials_
// Material Data follows: pulled from a .mtl file of the same name if present.
const OBJ_MATERIAL preview_shaderball_006_materials[1] =
{
	{
		{{ 1.000000f, 0.141469f, 0.000000f },
		1.000000f,
		{ 0.500000f, 0.500000f, 0.500000f },
		225.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		60.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		1.400000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		2},
		"Purp",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
	},
};
#define _preview_shaderball_006_materials_
#endif
/************************************************/
/*  This section contains the model's structure */
/************************************************/
#ifndef _preview_shaderball_006_batches_
// Use this conveinence array to batch render all geometry by like material.
// Each entry corresponds to the same entry in the materials array above.
// The two numbers provided are the IndexCount and the IndexOffset into the indices array.
// If you need more fine grained control(ex: for transformations) use the OBJ_MESH data below.
const unsigned int preview_shaderball_006_batches[1][2] =
{
	{ 297, 0 },
};
#define _preview_shaderball_006_batches_
#endif
#ifndef __OBJ_MESH__
typedef struct _OBJ_MESH_
{
	const char* name;
	unsigned    indexCount;
	unsigned    indexOffset;
	unsigned    materialIndex;
}OBJ_MESH;
#define __OBJ_MESH__
#endif
#ifndef _preview_shaderball_006_meshes_
// Mesh Data follows: Meshes are .obj groups sorted & split by material.
// Meshes are provided in sequential order, sorted by material first and name second.
const OBJ_MESH preview_shaderball_006_meshes[1] =
{
	{
		"default",
		297,
		0,
		0,
	},
};
#define _preview_shaderball_006_meshes_
#endif
